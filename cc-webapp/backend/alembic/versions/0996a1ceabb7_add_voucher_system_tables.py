"""Add voucher system tables

Revision ID: 0996a1ceabb7
Revises: 63d16ce09e51
Create Date: 2025-09-10 16:03:53.102437

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0996a1ceabb7'
down_revision: Union[str, None] = '63d16ce09e51'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('voucher_codes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=64), nullable=False),
    sa.Column('voucher_type', sa.String(length=50), nullable=False),
    sa.Column('points_value', sa.Integer(), nullable=False),
    sa.Column('gold_cost', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('external_site_url', sa.String(length=500), nullable=True),
    sa.Column('extra_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_voucher_codes_code'), 'voucher_codes', ['code'], unique=True)
    op.create_table('voucher_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voucher_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('old_status', sa.String(length=50), nullable=True),
    sa.Column('new_status', sa.String(length=50), nullable=True),
    sa.Column('transaction_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['voucher_id'], ['voucher_codes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('idx_leaderboards_game_type_period', table_name='game_leaderboards')
    op.drop_index('idx_leaderboards_rank', table_name='game_leaderboards')
    op.drop_index('idx_leaderboards_score', table_name='game_leaderboards')
    op.drop_table('game_leaderboards')
    op.drop_table('user_game_stats')
    op.drop_table('gacha_configurations')
    op.drop_index('ix_achievements_active', table_name='achievements')
    op.drop_index('ix_achievements_code', table_name='achievements')
    op.drop_table('achievements')
    op.drop_index('idx_crash_bets_session_id', table_name='crash_bets')
    op.drop_index('idx_crash_bets_user_id', table_name='crash_bets')
    op.drop_table('crash_bets')
    op.drop_index('idx_gacha_items_item_type', table_name='gacha_items')
    op.drop_index('idx_gacha_items_rarity', table_name='gacha_items')
    op.drop_table('gacha_items')
    op.drop_index('ix_user_achievements_unlocked', table_name='user_achievements')
    op.drop_index('ix_user_achievements_user', table_name='user_achievements')
    op.drop_table('user_achievements')
    op.drop_index('idx_crash_sessions_created_at', table_name='crash_sessions')
    op.drop_index('idx_crash_sessions_status', table_name='crash_sessions')
    op.drop_index('idx_crash_sessions_user_id', table_name='crash_sessions')
    op.drop_table('crash_sessions')
    op.drop_index('ix_event_outbox_dedupe_key', table_name='event_outbox')
    op.drop_index('ix_event_outbox_event_type', table_name='event_outbox')
    op.drop_index('ix_event_outbox_unpublished', table_name='event_outbox', postgresql_where='(published_at IS NULL)')
    op.drop_table('event_outbox')
    op.drop_index('ix_ab_test_participants_test_name', table_name='ab_test_participants')
    op.drop_index('ix_ab_test_participants_user_id', table_name='ab_test_participants')
    op.drop_index('ix_abtest_test_variant', table_name='ab_test_participants')
    op.drop_index('ix_abtest_user_test', table_name='ab_test_participants')
    op.drop_index('ix_admin_audit_action_created', table_name='admin_audit_logs')
    op.drop_column('admin_audit_logs', 'details')
    op.create_index(op.f('ix_admin_events_is_active'), 'admin_events', ['is_active'], unique=False)
    op.drop_index('ix_chat_messages_room_created', table_name='chat_messages')
    op.create_index(op.f('ix_event_mission_links_event_id'), 'event_mission_links', ['event_id'], unique=False)
    op.create_index(op.f('ix_event_mission_links_mission_template_id'), 'event_mission_links', ['mission_template_id'], unique=False)
    op.drop_index('idx_participation_user', table_name='event_participations')
    op.drop_index('ix_event_participations_user_completed', table_name='event_participations')
    op.drop_constraint('uq_event_participation_user_event', 'event_participations', type_='unique')
    op.drop_index('idx_event_active', table_name='events')
    op.drop_index('idx_event_dates', table_name='events')
    op.drop_index('ix_follow_target_user', table_name='follow_relations')
    op.drop_index('ix_follow_user', table_name='follow_relations')
    op.drop_index('ix_gacha_results_user_created', table_name='gacha_results')
    op.drop_index('ix_game_history_action_created', table_name='game_history')
    op.drop_index('ix_game_history_game_created', table_name='game_history')
    op.drop_index('ix_game_history_session', table_name='game_history')
    op.drop_index('ix_game_history_user_created', table_name='game_history')
    op.drop_index('ix_game_history_user_game_created', table_name='game_history')
    op.drop_constraint('game_sessions_external_session_id_key', 'game_sessions', type_='unique')
    op.drop_index('ix_game_sessions_created_at', table_name='game_sessions')
    op.drop_index('ix_game_sessions_start_time', table_name='game_sessions')
    op.drop_index('ix_game_sessions_user_created', table_name='game_sessions')
    op.drop_index('ix_game_sessions_user_game', table_name='game_sessions')
    op.drop_index('ix_game_sessions_user_status', table_name='game_sessions')
    op.drop_constraint('uq_game_stats_user_game', 'game_stats', type_='unique')
    op.alter_column('invite_codes', 'code',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=10),
               existing_nullable=False)
    op.drop_constraint('invite_codes_code_key', 'invite_codes', type_='unique')
    op.drop_constraint('fk_invite_codes_created_by_users', 'invite_codes', type_='foreignkey')
    op.create_foreign_key(None, 'invite_codes', 'users', ['created_by'], ['id'])
    op.drop_column('invite_codes', 'uses')
    op.create_index(op.f('ix_mission_templates_is_active'), 'mission_templates', ['is_active'], unique=False)
    op.drop_index('idx_mission_type', table_name='missions')
    op.drop_index('ix_notifications_user_unread', table_name='notifications', postgresql_where='(is_read = false)')
    op.drop_index('ix_refresh_tokens_user_id', table_name='refresh_tokens')
    op.drop_constraint('refresh_tokens_token_key', 'refresh_tokens', type_='unique')
    op.drop_constraint('refresh_tokens_user_id_fkey', 'refresh_tokens', type_='foreignkey')
    op.create_foreign_key(None, 'refresh_tokens', 'users', ['user_id'], ['id'])
    op.create_index(op.f('ix_reward_audit_created_at'), 'reward_audit', ['created_at'], unique=False)
    op.create_index(op.f('ix_reward_audit_event_id'), 'reward_audit', ['event_id'], unique=False)
    op.create_index(op.f('ix_reward_audit_source'), 'reward_audit', ['source'], unique=False)
    op.create_index(op.f('ix_reward_audit_user_id'), 'reward_audit', ['user_id'], unique=False)
    op.create_index(op.f('ix_reward_catalog_active'), 'reward_catalog', ['active'], unique=False)
    op.add_column('security_events', sa.Column('event_data', sa.Text(), nullable=True))
    op.add_column('security_events', sa.Column('user_agent', sa.Text(), nullable=True))
    op.add_column('security_events', sa.Column('is_suspicious', sa.Boolean(), nullable=True))
    op.alter_column('security_events', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint('shop_products_product_id_key', 'shop_products', type_='unique')
    op.drop_column('shop_products', 'metadata')
    op.drop_index('uq_shop_promo_codes_code', table_name='shop_promo_codes')
    op.drop_index('ix_shop_promo_usage_code', table_name='shop_promo_usage')
    op.drop_index('ix_shop_transactions_user_created', table_name='shop_transactions')
    op.drop_index('uq_shop_transactions_receipt_code', table_name='shop_transactions')
    op.drop_column('shop_transactions', 'metadata')
    op.drop_constraint('token_blacklist_jti_key', 'token_blacklist', type_='unique')
    op.drop_constraint('token_blacklist_token_key', 'token_blacklist', type_='unique')
    op.drop_index('ix_user_actions_action_type', table_name='user_actions')
    op.drop_index('ix_user_actions_type_created', table_name='user_actions')
    op.drop_index('ix_user_actions_user_created', table_name='user_actions')
    op.drop_index('ix_user_actions_user_id', table_name='user_actions')
    op.drop_constraint('user_actions_user_id_fkey', 'user_actions', type_='foreignkey')
    op.create_foreign_key(None, 'user_actions', 'users', ['user_id'], ['id'])
    op.drop_column('user_actions', 'details')
    op.drop_column('user_actions', 'timestamp')
    op.drop_index('ix_user_activities_user_date', table_name='user_activities')
    op.drop_index('idx_user_mission', table_name='user_missions')
    op.drop_index('ix_user_missions_user_completed', table_name='user_missions')
    op.drop_constraint('uq_user_mission_user_mission', 'user_missions', type_='unique')
    op.drop_index('ix_user_progress_user_type', table_name='user_progress')
    op.drop_index('ix_user_rewards_user_claimed', table_name='user_rewards')
    op.drop_constraint('uq_user_rewards_user_reward', 'user_rewards', type_='unique')
    op.alter_column('user_segments', 'rfm_group',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('user_segments', 'risk_profile',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.drop_index('ix_user_segments_user_id', table_name='user_segments')
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('user_sessions', 'ip_address',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=45),
               existing_nullable=True)
    op.drop_index('ix_user_sessions_user_id', table_name='user_sessions')
    op.drop_constraint('user_sessions_user_id_fkey', 'user_sessions', type_='foreignkey')
    op.create_foreign_key(None, 'user_sessions', 'users', ['user_id'], ['id'])
    op.alter_column('users', 'site_id',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('users', 'vip_tier',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'STANDARD'::character varying"))
    op.drop_constraint('users_site_id_key', 'users', type_='unique')
    op.drop_column('users', 'battlepass_level')
    op.drop_column('users', 'email')
    op.drop_column('users', 'total_spent')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('total_spent', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('battlepass_level', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.create_unique_constraint('users_site_id_key', 'users', ['site_id'])
    op.alter_column('users', 'vip_tier',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'STANDARD'::character varying"))
    op.alter_column('users', 'site_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_constraint(None, 'user_sessions', type_='foreignkey')
    op.create_foreign_key('user_sessions_user_id_fkey', 'user_sessions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    op.alter_column('user_sessions', 'ip_address',
               existing_type=sa.String(length=45),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.create_index('ix_user_segments_user_id', 'user_segments', ['user_id'], unique=False)
    op.alter_column('user_segments', 'risk_profile',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('user_segments', 'rfm_group',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.create_unique_constraint('uq_user_rewards_user_reward', 'user_rewards', ['user_id', 'reward_id'])
    op.create_index('ix_user_rewards_user_claimed', 'user_rewards', ['user_id', 'claimed_at'], unique=False)
    op.create_index('ix_user_progress_user_type', 'user_progress', ['user_id', 'progress_type'], unique=False)
    op.create_unique_constraint('uq_user_mission_user_mission', 'user_missions', ['user_id', 'mission_id'])
    op.create_index('ix_user_missions_user_completed', 'user_missions', ['user_id', 'completed', 'claimed'], unique=False)
    op.create_index('idx_user_mission', 'user_missions', ['user_id', 'mission_id'], unique=False)
    op.create_index('ix_user_activities_user_date', 'user_activities', ['user_id', 'activity_date'], unique=False)
    op.add_column('user_actions', sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('user_actions', sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_actions', type_='foreignkey')
    op.create_foreign_key('user_actions_user_id_fkey', 'user_actions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_user_actions_user_id', 'user_actions', ['user_id'], unique=False)
    op.create_index('ix_user_actions_user_created', 'user_actions', ['user_id', 'timestamp'], unique=False)
    op.create_index('ix_user_actions_type_created', 'user_actions', ['action_type', 'timestamp'], unique=False)
    op.create_index('ix_user_actions_action_type', 'user_actions', ['action_type'], unique=False)
    op.create_unique_constraint('token_blacklist_token_key', 'token_blacklist', ['token'])
    op.create_unique_constraint('token_blacklist_jti_key', 'token_blacklist', ['jti'])
    op.add_column('shop_transactions', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index('uq_shop_transactions_receipt_code', 'shop_transactions', ['receipt_code'], unique=False)
    op.create_index('ix_shop_transactions_user_created', 'shop_transactions', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_shop_promo_usage_code', 'shop_promo_usage', ['promo_code'], unique=False)
    op.create_index('uq_shop_promo_codes_code', 'shop_promo_codes', ['code'], unique=False)
    op.add_column('shop_products', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_unique_constraint('shop_products_product_id_key', 'shop_products', ['product_id'])
    op.alter_column('security_events', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('security_events', 'is_suspicious')
    op.drop_column('security_events', 'user_agent')
    op.drop_column('security_events', 'event_data')
    op.drop_index(op.f('ix_reward_catalog_active'), table_name='reward_catalog')
    op.drop_index(op.f('ix_reward_audit_user_id'), table_name='reward_audit')
    op.drop_index(op.f('ix_reward_audit_source'), table_name='reward_audit')
    op.drop_index(op.f('ix_reward_audit_event_id'), table_name='reward_audit')
    op.drop_index(op.f('ix_reward_audit_created_at'), table_name='reward_audit')
    op.drop_constraint(None, 'refresh_tokens', type_='foreignkey')
    op.create_foreign_key('refresh_tokens_user_id_fkey', 'refresh_tokens', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint('refresh_tokens_token_key', 'refresh_tokens', ['token'])
    op.create_index('ix_refresh_tokens_user_id', 'refresh_tokens', ['user_id'], unique=False)
    op.create_index('ix_notifications_user_unread', 'notifications', ['user_id', 'created_at'], unique=False, postgresql_where='(is_read = false)')
    op.create_index('idx_mission_type', 'missions', ['mission_type'], unique=False)
    op.drop_index(op.f('ix_mission_templates_is_active'), table_name='mission_templates')
    op.add_column('invite_codes', sa.Column('uses', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'invite_codes', type_='foreignkey')
    op.create_foreign_key('fk_invite_codes_created_by_users', 'invite_codes', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_unique_constraint('invite_codes_code_key', 'invite_codes', ['code'])
    op.alter_column('invite_codes', 'code',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.create_unique_constraint('uq_game_stats_user_game', 'game_stats', ['user_id', 'game_type'])
    op.create_index('ix_game_sessions_user_status', 'game_sessions', ['user_id', 'status'], unique=False)
    op.create_index('ix_game_sessions_user_game', 'game_sessions', ['user_id', 'game_type'], unique=False)
    op.create_index('ix_game_sessions_user_created', 'game_sessions', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_game_sessions_start_time', 'game_sessions', ['start_time'], unique=False)
    op.create_index('ix_game_sessions_created_at', 'game_sessions', ['created_at'], unique=False)
    op.create_unique_constraint('game_sessions_external_session_id_key', 'game_sessions', ['external_session_id'])
    op.create_index('ix_game_history_user_game_created', 'game_history', ['user_id', 'game_type', 'created_at'], unique=False)
    op.create_index('ix_game_history_user_created', 'game_history', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_game_history_session', 'game_history', ['session_id'], unique=False)
    op.create_index('ix_game_history_game_created', 'game_history', ['game_type', 'created_at'], unique=False)
    op.create_index('ix_game_history_action_created', 'game_history', ['action_type', 'created_at'], unique=False)
    op.create_index('ix_gacha_results_user_created', 'gacha_results', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_follow_user', 'follow_relations', ['user_id'], unique=False)
    op.create_index('ix_follow_target_user', 'follow_relations', ['target_user_id'], unique=False)
    op.create_index('idx_event_dates', 'events', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_event_active', 'events', ['is_active'], unique=False)
    op.create_unique_constraint('uq_event_participation_user_event', 'event_participations', ['user_id', 'event_id'])
    op.create_index('ix_event_participations_user_completed', 'event_participations', ['user_id', 'completed', 'claimed_rewards'], unique=False)
    op.create_index('idx_participation_user', 'event_participations', ['user_id'], unique=False)
    op.drop_index(op.f('ix_event_mission_links_mission_template_id'), table_name='event_mission_links')
    op.drop_index(op.f('ix_event_mission_links_event_id'), table_name='event_mission_links')
    op.create_index('ix_chat_messages_room_created', 'chat_messages', ['room_id', 'created_at'], unique=False)
    op.drop_index(op.f('ix_admin_events_is_active'), table_name='admin_events')
    op.add_column('admin_audit_logs', sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index('ix_admin_audit_action_created', 'admin_audit_logs', ['action', 'created_at'], unique=False)
    op.create_index('ix_abtest_user_test', 'ab_test_participants', ['user_id', 'test_name'], unique=False)
    op.create_index('ix_abtest_test_variant', 'ab_test_participants', ['test_name', 'variant'], unique=False)
    op.create_index('ix_ab_test_participants_user_id', 'ab_test_participants', ['user_id'], unique=False)
    op.create_index('ix_ab_test_participants_test_name', 'ab_test_participants', ['test_name'], unique=False)
    op.create_table('event_outbox',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('schema_version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('dedupe_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('publish_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='event_outbox_pkey')
    )
    op.create_index('ix_event_outbox_unpublished', 'event_outbox', ['published_at'], unique=False, postgresql_where='(published_at IS NULL)')
    op.create_index('ix_event_outbox_event_type', 'event_outbox', ['event_type'], unique=False)
    op.create_index('ix_event_outbox_dedupe_key', 'event_outbox', ['dedupe_key'], unique=False)
    op.create_table('crash_sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('crash_sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('external_session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bet_amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('auto_cashout_multiplier', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('actual_multiplier', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('win_amount', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('game_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('max_multiplier', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('cashout_multiplier', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='crash_sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='crash_sessions_pkey'),
    sa.UniqueConstraint('external_session_id', name='crash_sessions_external_session_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_crash_sessions_user_id', 'crash_sessions', ['user_id'], unique=False)
    op.create_index('idx_crash_sessions_status', 'crash_sessions', ['status'], unique=False)
    op.create_index('idx_crash_sessions_created_at', 'crash_sessions', ['created_at'], unique=False)
    op.create_table('user_achievements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('achievement_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unlocked_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('progress_value', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('is_unlocked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], name='fk_user_achievements_achievement_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_user_achievements_user_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_achievements_pkey'),
    sa.UniqueConstraint('user_id', 'achievement_id', name='uq_user_achievement_user_achievement')
    )
    op.create_index('ix_user_achievements_user', 'user_achievements', ['user_id'], unique=False)
    op.create_index('ix_user_achievements_unlocked', 'user_achievements', ['is_unlocked'], unique=False)
    op.create_table('gacha_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('rarity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('item_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='gacha_items_pkey')
    )
    op.create_index('idx_gacha_items_rarity', 'gacha_items', ['rarity'], unique=False)
    op.create_index('idx_gacha_items_item_type', 'gacha_items', ['item_type'], unique=False)
    op.create_table('crash_bets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bet_amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payout_amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cashout_multiplier', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'placed'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['crash_sessions.id'], name='crash_bets_session_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='crash_bets_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='crash_bets_pkey')
    )
    op.create_index('idx_crash_bets_user_id', 'crash_bets', ['user_id'], unique=False)
    op.create_index('idx_crash_bets_session_id', 'crash_bets', ['session_id'], unique=False)
    op.create_table('achievements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('condition', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('reward_coins', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('reward_gold', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    sa.Column('badge_color', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='achievements_pkey'),
    sa.UniqueConstraint('code', name='uq_achievements_code')
    )
    op.create_index('ix_achievements_code', 'achievements', ['code'], unique=False)
    op.create_index('ix_achievements_active', 'achievements', ['is_active'], unique=False)
    op.create_table('gacha_configurations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('cost_per_pull', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=False),
    sa.Column('rarity_rates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('item_pool', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('daily_limit', sa.INTEGER(), server_default=sa.text('10'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='gacha_configurations_pkey'),
    sa.UniqueConstraint('name', name='gacha_configurations_name_key')
    )
    op.create_table('user_game_stats',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_bets', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('total_wins', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('total_losses', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('highest_multiplier', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=True),
    sa.Column('total_profit', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_game_stats_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name='user_game_stats_pkey')
    )
    op.create_table('game_leaderboards',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('score', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('rank_position', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('period_type', sa.VARCHAR(length=20), server_default=sa.text("'ALL_TIME'::character varying"), autoincrement=False, nullable=False),
    sa.Column('period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='game_leaderboards_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='game_leaderboards_pkey'),
    sa.UniqueConstraint('user_id', 'game_type', 'period_type', 'period_start', name='game_leaderboards_user_id_game_type_period_type_period_star_key')
    )
    op.create_index('idx_leaderboards_score', 'game_leaderboards', [sa.text('score DESC')], unique=False)
    op.create_index('idx_leaderboards_rank', 'game_leaderboards', ['rank_position'], unique=False)
    op.create_index('idx_leaderboards_game_type_period', 'game_leaderboards', ['game_type', 'period_type', 'period_start'], unique=False)
    op.drop_table('voucher_transactions')
    op.drop_index(op.f('ix_voucher_codes_code'), table_name='voucher_codes')
    op.drop_table('voucher_codes')
    # ### end Alembic commands ###
